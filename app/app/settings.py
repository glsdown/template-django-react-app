"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Useful feature to quickly switch betwen development and production settings
ENVIRONMENT_DESCRIPTION = os.environ.get("ENVIRONMENT_DESCRIPTION", "DEV")
PRODUCTION_MODE = ENVIRONMENT_DESCRIPTION == "PROD"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Double check before using in production:
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not PRODUCTION_MODE

# Domains that are able to 'host' this application i.e. can be used to
# access it
ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
]

# Emails that the user can sign up with - to allow any, leave as an empty list
ALLOWED_EMAIL_DOMAINS = ["mydomain", "seconddomain"]

if PRODUCTION_MODE:
    # Once set up for HTTPS in production, set these:
    # CSRF_COOKIE_SECURE = True
    # SESSION_COOKIE_SECURE = True

    # People who should receive email notifications of errors
    ADMINS = [("Mary", "mary@example.com"), ("John", "john@example.com")]
    # Set the logging level
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "mail_admins": {
                "level": "ERROR",
                "class": "django.utils.log.AdminEmailHandler",
                "include_html": True,
            },
            "console": {
                "class": "logging.StreamHandler",
            },
        },
        "root": {
            "handlers": ["console"],
            "level": "WARNING",
        },
    }

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Rest framework
    "rest_framework",
    # Knox (login/authentication with tokens)
    "knox",
    # Password reset (needs to be after rest_framework)
    "django_rest_passwordreset",
    # Allow easy filtering with DRF
    "django_filters",
    # Internal apps
    "accounts",
    "api",
    "frontend",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("knox.auth.TokenAuthentication",),
    "DATETIME_FORMAT": "%d/%m/%Y %H:%M:%S",
    # Details on filtering can be found here:
    # https://www.django-rest-framework.org/api-guide/filtering/
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend"
    ],
    # Default search and ordering params - made explicit here for clarity
    "SEARCH_PARAM": "search",
    "ORDERING_PARAM": "ordering",
    # Convert snake_case from python style, to react camelCase, and vice versa
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
}

# Knox settings for token authentication
# http://james1345.github.io/django-rest-knox/settings/
REST_KNOX = {
    # Token timeout
    "TOKEN_TTL": timedelta(hours=1),
    # Whether to refresh the token timeout once a token has been used again
    "AUTO_REFRESH": True,
    # Max number of tokens per user
    "TOKEN_LIMIT_PER_USER": 1,
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Where the main list of urls are
ROOT_URLCONF = "app.urls"

# We update the default User model to use email rather than username - this
# makes Django use this as the user model
AUTH_USER_MODEL = "accounts.CustomUser"

# Places to find templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates", BASE_DIR / "accounts" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Use with Postgres to specify a default schema
DEFAULT_SCHEMA = "application"

DATABASES = {
    "default": {
        # "ENGINE": ,
        "ENGINE": "django.db.backends.postgresql",
        # Set the default schema
        "OPTIONS": {"options": f"-c search_path={DEFAULT_SCHEMA},public"},
        # Retrieve the database options
        "NAME": os.environ.get("DATABASE_NAME", "postgres"),
        "USER": os.environ.get("DATABASE_USER", ""),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD", ""),
        "HOST": os.environ.get("DATABASE_HOST", ""),
        "PORT": os.environ.get("DATABASE_PORT", ""),
        # The lifetime of a database connection, as an integer of seconds.
        "CONN_MAX_AGE": 0,
        # Test settings
        "TEST": {"NAME": "test_development", "TEMPLATE": "template_test"},
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        # Sufficiently different to the username, email, first and last name
        "NAME": (
            "django.contrib.auth.password_validation"
            ".UserAttributeSimilarityValidator"
        ),
    },
    {
        # Not a common word/phrase/term
        "NAME": (
            "django.contrib.auth.password_validation"
            ".CommonPasswordValidator"
        ),
    },
    {
        # Minimum Complexity
        "NAME": "app.validators.PasswordComplexityValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "Europe/London"
USE_I18N = True
USE_L10N = True
USE_TZ = False

# Login/logout redirect URLs - the # is because we are using the HashRouter
# within React
LOGIN_URL = "/#/login/"
LOGOUT_REDIRECT_URL = "/#/login"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
# Note: When using this where Debug=False it WILL NOT WORK. This is because
# django doesn't serve static files in production mode. Instead they need to
# be served by a separate server:
# https://docs.djangoproject.com/en/3.2/howto/static-files/deployment/
# When deploying to elastic beanstalk, it handles this for you, and the only
# thing required beyond the below, is to ensure you include the file in
# .ebextensions/django.config
STATIC_URL = "/static/"
# Where the static files are stored and should be collated to
STATIC_ROOT = str(BASE_DIR.joinpath("static"))
# Locations where static files can be found for collation
STATICFILES_DIRS = []

# Media storage options
MEDIA_ROOT = str(BASE_DIR.joinpath("media"))
MEDIA_URL = "/media/"

# Max upload file sizes
DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 15  # 15M
FILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Sending emails
DEFAULT_FROM_EMAIL = "Sender Name <support@example.com>"
EMAIL_SUBJECT_PREFIX = "Application Name - "
SERVER_EMAIL = DEFAULT_FROM_EMAIL  # Admin emails sent from

if PRODUCTION_MODE:

    # What is used to send emails - this is the standard SMTP backend
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    # SMTP server details
    # https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-smtp.html
    EMAIL_HOST = os.environ.get(
        "MAIL_SERVER", "email-smtp.eu-west-1.amazonaws.com"
    )
    EMAIL_PORT = os.environ.get("MAIL_PORT", 25)
    EMAIL_HOST_USER = os.environ.get("MAIL_USERNAME", "username")
    EMAIL_HOST_PASSWORD = os.environ.get("MAIL_PASSWORD", "password")
    EMAIL_USE_TLS = True
else:
    # When developing, there is no need to use the SMTP mail server, so instead
    # use a file based email server. It stores all 'emails' in the
    # EMAIL_FILE_PATH folder location.
    EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
    EMAIL_FILE_PATH = str(BASE_DIR.joinpath("sent_emails"))
