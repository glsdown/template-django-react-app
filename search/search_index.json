{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Django and React App example","text":"<p>This is a template application built using Django and React. It is based on the video tutorial provided by Traversy Media, but has been updated to use some of the latest tools and techniques.</p>"},{"location":"index.html#tools-used","title":"Tools used","text":"<p>The aim is to provide a base template with many of the usual required features in it. This template includes:</p> <ul> <li>Django user and database management tools, as well as admin features</li> <li>Django Rest Framework to provide RESTful API endpoints for accessing the data</li> <li>Knox for management of user tokens</li> <li>React frontend for providing an interactive user experience</li> <li>Redux and Redux-Toolkit to manage the frontend application state</li> <li>Django and GitHub actions for automated testing</li> </ul> <p>There are a number of potential customisations, which can be found in the Customisation section to the left. It is not designed to be used as-is, as there are a number of changes that will need to be made to make the app do what you want, but instead designed to demonstrate some common use cases.</p>"},{"location":"index.html#app-overview","title":"App Overview","text":"<p>The basic app contains:</p> <ul> <li>Admin setup (built-in Django admin)</li> <li>Account Management (<code>accounts</code>)<ul> <li>Login and Logout via API requests</li> <li>Password reset request, email and change via API requests</li> <li>Registration, including email validation via API requests</li> </ul> </li> <li>API examples (<code>api</code>)<ul> <li>Demonstration of creating a fully RESTful API using DRF's <code>ModelViewSet</code></li> <li>API routes are protected through the use of a Token. This must be passed to the API in the headers by including <code>Authorization</code> as <code>Token abc123abc123abc123</code>.</li> <li>Documentation of the api is visible by visiting the API link using the DRF default templates</li> <li>Pagination example</li> <li>Field names are converted from snake_case default of python, to the camelCase default of React.</li> </ul> </li> <li>Frontend application (<code>frontend</code>)<ul> <li>React source files demonstrating use of the backend APIs with Redux-Toolkits' <code>CreateApi</code> helper. The default API set up includes use of tokens and the main API route.</li> <li>Complete login/logout/register/reset-password flow and usage.</li> <li>Alert templates</li> </ul> </li> </ul>"},{"location":"index.html#useful-tools","title":"Useful tools","text":"<p>I thoroughly recommend downloading these for testing, and demonstration purposes:</p> <ul> <li>Postman - to test API requests and responses</li> <li>Redux DevTools Chrome Extension - to be able to see the current state and changes to the redux store as you are using the application.</li> </ul>"},{"location":"index.html#testing","title":"Testing","text":"<p>Unit tests are created using the Django testing library. You'll find them in the relevant <code>tests</code> folders inside <code>accounts</code> and <code>api</code>. The tests inside <code>api</code> are just examples and don't represent the full test suite.</p> <p>Tests can be run using <code>python app/manage.py test app/ --noinput</code> or <code>npm run test</code>.</p> <p>There is also an example of how this can be used with GitHub actions for automated testing on push and pull requests in <code>.github/workflows/test.yml</code>.</p>"},{"location":"additional-features.html","title":"Adding additional features","text":"<p>As mentioned, this app is designed to demonstrate some common use cases, but there are likely to be many more things that you want to change about it. I won't cover all of them here, but provide some common locations to find things you might want to add.</p>"},{"location":"additional-features.html#new-tables","title":"New tables","text":"<p>The tables are built using the Django <code>models.py</code> files. You can add new tables inside these using the standard Django definitions. New tables that are going to form part of the main database should be in <code>app/api/models.py</code>, but any changes required to the user profile can be found in <code>app/accounts/models.py</code>.</p> <p>Once you have defined or made changes to the models, you can create the database tables by running:</p> <pre><code>python app/manage.py makemigrations\npython app/manage.py migrate\n</code></pre>"},{"location":"additional-features.html#new-profile-fields","title":"New profile fields","text":"<p>If you are wanting to capture additional user data, you should do so using the User Profile. This can be found in <code>app/accounts/models.py</code>. Once the models have been updated, you will need to also update the <code>RegisterAPI</code> class in <code>app/accounts/api.py</code> to ensure that these are captured:</p> <pre><code># app/accounts/api.py\n\n...\nclass RegisterAPI(generics.GenericAPIView):\n    ...\n\n    def post(self, request, *args, **kwargs):\n        ...\n        for field in [\"title\", \"job_title\"]:\n            ...\n...\n</code></pre>"},{"location":"additional-features.html#adding-fields-to-the-admin-section","title":"Adding fields to the admin section","text":"<p>There are some basic set up in the admin section included here, but it's highly likely you'll want to add additional settings. I won't include how to register tables with admin, as this is well covered in the Django documentation, but instead include helpful hints.</p>"},{"location":"additional-features.html#tabular-paginated-inlines","title":"Tabular Paginated Inlines","text":"<p>When working with data models that have a large amount of related fields, it can take a very long time to load all of the related data. Instead, you can make use of the <code>django-admin-inline-paginator</code> to paginate the inlines.</p> <p>The basic structure, is to install it using <code>pip install django-admin-inline-paginator</code> (remember to also add it to your requirements file):</p> <pre><code># app/requirements.in\n...\ndjango-admin-inline-paginator\n...\n</code></pre> <p>Regenerate your <code>requirements.txt</code> using <code>pip-compile</code>. Then, add it to your settings as an installed app:</p> <pre><code># app/settings.py\n\nINSTALLED_APPS = [\n    ...\n    \"django_admin_inline_paginator\",\n    ...\n]\n</code></pre> <p>Then in your <code>admin.py</code> file where you create and register your models, import it and create a subclass, then add it as an inline in the parent admin model.</p> <pre><code># admin.py\nfrom django.contrib import admin\nfrom django_admin_inline_paginator.admin import TabularInlinePaginated\n\nfrom api.models import MyModel, MyParentModel\n\nclass ExampleInline(TabularInlinePaginated):\n    model = MyModel\n    extra = 1\n    per_page = 5\n\nclass ExampleAdmin(admin.ModelAdmin):\n    model = MyParentModel\n    inlines = [ExampleInline]\n    fields = \"all\"\n</code></pre>"},{"location":"additional-features.html#list-view-fields","title":"List view fields","text":"<p>The list view (i.e. what you see when you first access the admin panel for that Model) allows any fields that are defined on the model. This includes the string representation <code>__str__</code>, as well as calculated fields defined on the model set, and custom fields defined in the ModelAdmin.</p> <p>When using related fields, it's good to include, <code>list_prefetch_related</code> to speed up the table.</p> <p>Here is an advanced example of how these can be combined:</p> <pre><code># admin.py\n...\nclass UserOrganisationAdmin(admin.ModelAdmin):\n    model = UserOrganisation\n    list_display = [\n        \"__str__\",\n        \"get_region\",\n        \"get_number_examples\",\n    ]\n    list_filter = [\"fk_region__name\"]\n    list_prefetch_related = [\"examples\"]\n    search_fields = [\"code\", \"name\", \"fk_region__name\"]\n\n    # Define how to get 'get_region' from above\n    def get_region(self, instance):\n        return instance.fk_region.name\n    #\u00a0Give the field 'get_region' a readable name\n    get_region.short_description = \"Region\"\n\n    # Define how to get 'get_number_examples' from above\n    def get_number_examples(self, instance):\n        return instance.examples.count()\n    #\u00a0Give the field 'get_number_examples' a readable name\n    get_number_examples.short_description = \"Number of Examples\"\n...\n</code></pre>"},{"location":"additional-features.html#search-and-filter-on-related-fields","title":"Search and Filter on related fields","text":"<p>As the search and filter options allow you to use any string representation of a field name, you can also include related fields as follows:</p> <pre><code>class MyModelAdmin(admin.ModelAdmin):\n    model = MyModel\n    list_display = [\"get_owner\", \"get_service\", \"get_region\", \"location\"]\n    search_fields = [\n        \"fk_region__name\",\n        \"fk_provision__fk_owner__name\",\n        \"fk_provision__fk_service__code\",\n        \"fk_provision__fk_service__description\",\n    ]\n    list_filter = [\"fk_region\"]\n    list_select_related = [\n        \"fk_region\",\n        \"fk_provision\",\n        \"fk_provision__fk_owner\",\n        \"fk_provision__fk_service\",\n    ]\n\n    ...\n</code></pre>"},{"location":"additional-features.html#readonly-and-revoke-delete-permissions","title":"Readonly and revoke delete permissions","text":"<p>You can set readonly fields within the admin panel by using the <code>readonly_fields</code> attribute.</p> <p>If you want to make something editable only only creation, then you need to use the <code>get_readonly_fields</code> method. Additionally, if you want to prevent the user from being able to delete it, then you need to use the <code>has_delete_permission</code> method.</p> <pre><code>class ExampleAdmin(admin.ModelAdmin):\n    model = MyModel\n\n    def get_readonly_fields(self, request, obj=None):\n        # Don't allow the user to change the description\n        if obj:\n            return [\"description\"]\n        else:\n            return []\n\n    def has_delete_permission(self, request, obj=None):\n        # Don't allow the user to delete\n        return False\n</code></pre>"},{"location":"additional-features.html#new-api-endpoints","title":"New API endpoints","text":""},{"location":"additional-features.html#backend-api-creation","title":"Backend API creation","text":"<p>When you have new data, it is likely that you will want to create ways of accessing this by exposing them via API endpoints. The easiest way to do this, is to create a <code>ModelSerializer</code> in <code>app/api/serializers.py</code> then use the <code>ModelViewSet</code> to automatically create all required REST API endpoints. You can see an example of how this can be used, and integrated with pagination, filter and search functionality in the example provided in <code>app/api/api.py</code>.</p> <p>Once you have this defined, you need to register it with your router in <code>app/api/urls.py</code>:</p> <pre><code># app/api/urls.py\n\nfrom rest_framework import routers\n\nfrom api.api import ExampleDataTableViewSet\n\nrouter = routers.DefaultRouter()\nrouter.register(\"examples\", ExampleDataTableViewSet, \"examples\")\n\nurlpatterns = router.urls\n</code></pre> <p>If you don't need all endpoints (for example, perhaps you only want to create a read-only endpoint), then instead, you want to use a View Class. You will still need to create the serializer first.</p> <p>You can see an example of making use of Generic Views in the <code>app/accounts/api.py</code> file, as they are used as part of the user management process.</p> <p>The biggest difference when using them, is that you don't register them with the router, but instead provide them as paths in your <code>app/api/urls.py</code> file:</p> <pre><code># app/api/urls.py\n\nfrom rest_framework import routers\nfrom django.urls import path\n\nfrom api.api import ExampleDataTableViewSet, UserAPI\n\nrouter = routers.DefaultRouter()\nrouter.register(\"examples\", ExampleDataTableViewSet, \"examples\")\n\nurlpatterns = [path(\"user\", UserAPI.as_view())]\n\nurlpatterns += router.urls\n</code></pre> <p>When creating the views, it's worth using <code>prefetch_related</code> and <code>select_related</code> to speed up the collection of related data. You can read about the detail of this here. Broadly though:</p> <p>In Django, <code>select_related</code> and <code>prefetch_related</code> are designed to stop the deluge of database queries that are caused by accessing related objects.</p> <ul> <li><code>select_related()</code> \u201cfollows\u201d foreign-key relationships, selecting additional related-object data when it executes its query.</li> <li><code>prefetch_related()</code> does a separate lookup for each relationship, and does the \u201cjoining\u201d in Python.</li> </ul> <p>One uses <code>select_related</code> when the object that you\u2019re going to be selecting is a single object, so <code>OneToOneField</code> or a <code>ForeignKey</code>. You use <code>prefetch_related</code> when you\u2019re going to get a \u201cset\u201d of things, so <code>ManyToManyFields</code> or reverse ForeignKeys.</p>"},{"location":"additional-features.html#frontend-api-pickup","title":"Frontend API pickup","text":"<p>Once you have created (and tested) your API endpoints, you can then integrate them into the frontend app. To do this, you need to identify whether this is a new feature of the app, or it relates to something that already exists.</p> <p>If it's a new feature, you should add a new folder inside <code>app/frontend/src/features</code>, if not, you can add the endpoint to the relevant Slice. For API calls, as the base route for all is the same, there is a single <code>CreateAPI</code> slice created in <code>app/frontend/src/app/splitApiSlice.js</code>, and endpoints are injected into it from the individual feature slices.</p> <p>Here is an example of a full CRUD API set up, including how tags can be added and validated, and success messages can be sent. Broadly speaking, <code>queries</code> are used when the database isn't changed, whereas <code>mutations</code> involve a change in the underlying data.</p> <pre><code>// app/frontend/src/features/data/dataApiSlice.js\nimport splitApiSlice from '../../app/splitApiSlice';\nimport { createMessage } from '../messages/messageSlice';\n\nexport const reducerName = 'data';\n\nexport const dataApiSlice = splitApiSlice.injectEndpoints({\n    endpoints(builder) {\n        return {\n            // Add an entry via a POST request\n            addData: builder.mutation({\n                query: (data) =&gt; ({\n                    url: '/examples/',\n                    method: 'POST',\n                    body: data,\n                }),\n                // Invalidate all currently loaded data - force a complete refresh\n                invalidatesTags: [{ type: `${reducerName}`, id: 'LIST' }],\n                async onCacheEntryAdded(arg, { dispatch, cacheDataLoaded }) {\n                    // Display a message when it's been added\n                    await cacheDataLoaded;\n                    dispatch(\n                        createMessage({\n                            msg: 'Entry Added',\n                            alertType: 'success',\n                        }),\n                    );\n                },\n            }),\n            // Delete an entry via a DELETE request\n            deleteData: builder.mutation({\n                query: (id) =&gt; ({\n                    url: `/examples/${id}`,\n                    method: 'DELETE',\n                }),\n                // Invalidate the entry relating to that ID\n                invalidatesTags: (result, error, { id }) =&gt; [\n                    { type: `${reducerName}`, id },\n                ],\n                async onCacheEntryAdded(arg, { dispatch, cacheDataLoaded }) {\n                    // Display a message when it's been deleted\n                    await cacheDataLoaded;\n                    dispatch(\n                        createMessage({\n                            msg: 'Entry Deleted',\n                            alertType: 'success',\n                        }),\n                    );\n                },\n            }),\n            // (Partially) update an entry via a PATCH request\n            // Using PUT would update the entire entry\n            updateData: builder.mutation({\n                query: (data) =&gt; {\n                    const { id, ...body } = data;\n                    return {\n                        url: `/examples/${id}/`,\n                        method: 'PATCH',\n                        body,\n                    };\n                },\n                // Invalidate the entry relating to that ID\n                invalidatesTags: (result, error, { id }) =&gt; [\n                    { type: `${reducerName}`, id },\n                ],\n                // Update the details for that single item in the store\n                async onQueryStarted(\n                    { id, ...patch },\n                    { dispatch, queryFulfilled },\n                ) {\n                    const patchResult = dispatch(\n                        splitApiSlice.util.updateQueryData(\n                            'getDataPoint',\n                            id,\n                            (draft) =&gt; {\n                                Object.assign(draft, patch);\n                            },\n                        ),\n                    );\n                    try {\n                        await queryFulfilled;\n                    } catch {\n                        patchResult.undo();\n                    }\n                },\n                async onCacheEntryAdded(arg, { dispatch, cacheDataLoaded }) {\n                    // Display a message when successfully updated\n                    await cacheDataLoaded;\n                    dispatch(\n                        createMessage({\n                            msg: 'Entry Updated',\n                            alertType: 'success',\n                        }),\n                    );\n                },\n            }),\n            // Get all the entries from the API (paginated) using a GET request\n            getData: builder.query({\n                query: ({ limit = 10, page = 1 }) =&gt; ({\n                    url: `/examples/?limit=${limit}&amp;page=${page}`,\n                }),\n                // Tag all the entries with the ID\n                providesTags: (result) =&gt; {\n                    if (result &amp;&amp; result.results) {\n                        return [\n                            ...result.results.map(({ id }) =&gt; ({\n                                type: `${reducerName}`,\n                                id,\n                            })),\n                            { type: `${reducerName}`, id: 'LIST' },\n                        ];\n                    }\n                    return [{ type: `${reducerName}`, id: 'LIST' }];\n                },\n            }),\n            // Get a single entry using a GET request\n            getDataPoint: builder.query({\n                query: (id) =&gt; `/examples/${id}/`,\n                // Tag it with the right ID\n                providesTags: (result, error, id) =&gt; [\n                    { type: `${reducerName}`, id },\n                ],\n            }),\n        };\n    },\n    // Don't override existing endpoints in the slice\n    overrideExisting: false,\n});\n\n// Export the required hooks\nexport const {\n    useGetDataQuery,\n    useAddDataMutation,\n    useDeleteDataMutation,\n    useUpdateDataMutation,\n} = dataApiSlice;\n</code></pre>"},{"location":"app-settings.html","title":"Places to customise and modify the app","text":"<p>In here are all the places where the look and feel for the end user can be customised. It's important to note though that this doesn't cover adding or removing additional functionality, or customisation under the hood (e.g. field/table names), but rather styling what is currently in place in the base app, such as the app name or title.</p>"},{"location":"app-settings.html#frontend","title":"Frontend","text":"<p>There are a huge number of customisations and changes that can be made in the frontend, so I won't go through them here, but instead point out a couple of places where they are definitely recommended.</p> <p>When you want to make changes to the frontend, you can find the files in <code>app/frontend/src</code>. In here, you will see that there are 4 folders:</p> <ol> <li><code>app</code> - contains the features related to how the app runs, including the main <code>App.js</code> file and redux store setup.</li> <li><code>components</code> - core features of the application<ul> <li><code>layout</code> - components that are important to the layout of the app including the <code>Header</code>, <code>Loader</code> and <code>Pagination</code> components.</li> <li><code>router</code> - components that are important for routing purposes including the <code>PrivateRoute</code> and <code>NotFound</code> components.</li> </ul> </li> <li><code>features</code> - individual folders relating to the redux state and related components. Each is sorted by function to keep related items together.</li> </ol>"},{"location":"app-settings.html#navbar","title":"Navbar","text":"<p>The navbar can be found in <code>app/frontend/src/components/layout/pageStructure/Header.js</code>. In here, you can customise the name that appears in the top of the bar, as well as the branding.</p> <pre><code>// app/frontend/src/components/layout/pageStructure/Header.js\n\n...\n&lt;Navbar.Brand as={Link} to=\"/\"&gt;\n    Test Django/React App\n&lt;/Navbar.Brand&gt;\n...\n</code></pre>"},{"location":"app-settings.html#favicon","title":"Favicon","text":"<p>The favicon can be found in the folder <code>app/frontend/static</code>, and can be replaced as it is.</p>"},{"location":"app-settings.html#tab-title","title":"Tab title","text":"<p>The title of the tab that is displayed can be amended in the <code>app/frontend/templates/frontend/index.html</code> file:</p> <pre><code>&lt;!-- app/frontend/templates/frontend/index.html --&gt;\n\n...\n&lt;title&gt;Example App&lt;/title&gt;\n...\n</code></pre>"},{"location":"app-settings.html#email-and-password-verification","title":"Email and Password verification","text":"<p>There is some frontend email and password verification which is defined in <code>app/frontend/src/app/helpers/validation.js</code>. You can define the regex pattern for email and passwords through the app, as well as the error messages in here.</p> <p>If you update the list of allowed domains, you'll need to update it in here too:</p> <pre><code>// app/frontend/src/app/helpers/validation.js\n\nexport const validEmail =\n    /^[a-zA-Z0-9\\._:$!%-']+@[a-zA-Z0-9\\.-]*(?:mydomain|seconddomain)\\.[a-zA-Z\\\\.]{2,5}$/; // eslint-disable-line\nexport const validEmailHelp = 'Email must be in the form xxx@xxx.xxx';\nexport const validPassword = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,100}$/;\nexport const validPasswordHelp =\n    'Your password must contain at least 1 number, 1 lowercase and 1 uppercase number, and be 8 or more characters.';\n</code></pre>"},{"location":"app-settings.html#loading-spinner","title":"Loading Spinner","text":"<p>The loading spinner you see appear can be customised in <code>app/frontend/src/components/layout/loader/Loader.js</code>. The current spinner uses the <code>react-spinners</code> library, and other examples can be found here. To update the spinner, it's a simple case of changing which one is imported, as well as (potentially) the size and speed multiplier.</p> <pre><code>// app/frontend/src/components/layout/loader/Loader.js\n\n...\nimport RSLoader from 'react-spinners/PuffLoader';\n...\n&lt;RSLoader size={200} speedMultiplier={0.8} /&gt;\n...\n</code></pre>"},{"location":"app-settings.html#metadata","title":"Metadata","text":"<p>Metadata about the frontend application can be found in the <code>package.json</code> file.</p> <pre><code>// package.json\n\n{\n  \"name\": \"webapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"This is an example web app built with Django and React.\",\n  ...\n}\n</code></pre>"},{"location":"app-settings.html#backend","title":"Backend","text":""},{"location":"app-settings.html#core-settings","title":"Core Settings","text":"<p>The majority of settings are handled in the <code>app/app/settings.py</code> file. These are the settings that you should look out for.</p>"},{"location":"app-settings.html#environment-variables","title":"Environment Variables","text":"<p>The vast majority of the settings are controlled using environment variables, so you should update these:</p> Local - Mac <p>If you are running it locally, you will need to export them to your current environment. I recommend using direnv to manage these. Once you have it installed, you can use the <code>.envrc.example</code> file as a template to create your own <code>.envrc</code> file, and use direnv to automatically load them using <code>direnv allow .</code>. </p> <p>Alternatively, you can just export them for each terminal session.</p> <pre><code>export ENVIRONMENT_DESCRIPTION='PROD' # PROD or DEV or TEST\nexport SECRET_KEY='secret-generated-key-here'\nexport DATABASE_NAME='database-name-here'\nexport DATABASE_USER='database-user-here'\nexport DATABASE_PASSWORD='database-user-password-here'\nexport DATABASE_HOST='database-host-here'\nexport DATABASE_PORT='database-port-here'\n# Only required if ENVIRONMENT_DESCRIPTON='PROD'\nexport MAIL_SERVER='mail-server-here'\nexport MAIL_PORT='mail-port-here'\nexport MAIL_USERNAME='mail-username-here'\nexport MAIL_PASSWORD='mail-password-here'\n</code></pre> Local - Windows <p>If you are running it locally, you will need to export them to your current environment. This will create a temporary environment variable. It will only exist for that terminal session, but is available immediately.</p> <pre><code>setx ENVIRONMENT_DESCRIPTION PROD\nsetx SECRET_KEY secret-generated-key-here\nsetx DATABASE_NAME database-name-here\nsetx DATABASE_USER database-user-here\nsetx DATABASE_PASSWORD database-user-password-here\nsetx DATABASE_HOST database-host-here\nsetx DATABASE_PORT database-port-here\nsetx MAIL_SERVER mail-server-here\nsetx MAIL_PORT mail-port-here\nsetx MAIL_USERNAME mail-username-here\nsetx MAIL_PASSWORD mail-password-here\n</code></pre> Elastic Beanstalk <p>More details on these can be found in elastic-beanstalk-deployment</p> <pre><code>ENVIRONMENT_DESCRIPTION: PROD\nSECRET_KEY: secret-generated-key-here\nDATABASE_NAME: database-name-here\nDATABASE_USER: database-user-here\nDATABASE_PASSWORD: database-user-password-here\nDATABASE_HOST: database-host-here\nDATABASE_PORT: database-port-here\nMAIL_SERVER: mail-server-here\nMAIL_PORT: mail-port-here\nMAIL_USERNAME: mail-username-here\nMAIL_PASSWORD: mail-password-here\n</code></pre>"},{"location":"app-settings.html#database","title":"Database","text":"<p>You need to add your own production database backend. The engines available are:</p> <ul> <li><code>\"django.db.backends.postgresql\"</code></li> <li><code>\"django.db.backends.mysql\"</code></li> <li><code>\"django.db.backends.sqlite3\"</code></li> <li><code>\"django.db.backends.oracle\"</code></li> </ul> <p>Postgresql Usage with Elastic Beanstalk</p> <p>If you are using Postgres with elastic beanstalk, you should also make sure to include the hidden dependency <code>psycopg2-binary</code> in your requirements file. This is instead of <code>pyscopg2</code>.</p> <pre><code>DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        ...\n    }\n}\n</code></pre>"},{"location":"app-settings.html#postgressql-schemas","title":"PostgresSQL Schemas","text":"<p>When using postgresSQL, you probably want to make use of schemas. This is possible to do, but does have a couple of caveats. In the <code>settings.py</code> file, there is a default schema included:</p> <pre><code># Use with Postgres to specify a default schema\nDEFAULT_SCHEMA = \"application\"\n\nDATABASES = {\n    \"default\": {\n        ...\n        \"OPTIONS\": {\"options\": f\"-c search_path={DEFAULT_SCHEMA},public\"},\n        ...\n    }\n}\n</code></pre> <p>If you want specific models in custom schemas, the easiest way is to make use of the <code>db_table</code> setting within the model <code>Meta</code> class:</p> <pre><code># accounts/models.py\n\nclass Profile(models.Model):\n    ...\n    class Meta:\n        ...\n        # fmt: off\n        db_table = 'accounts\\\".\\\"profile'\n        # fmt: on\n        ...\n</code></pre> <p>In this example, I am setting this table called <code>profile</code> to be in the <code>accounts</code> schema.</p> <p>It's worth mentioning that formatters don't like this syntax (hence the <code>fmt</code> comments), but it's valid and required for Django to recognise this is a table within a schema.</p> <p>When building this table, Django won't create the schemas for you - these need to be in place prior to running the migrations. There is a script to build this in <code>database-setup.py</code>.</p> <pre><code>python database-setup.py initial-setup\n</code></pre> <p>Additionally, these will need to be included in the template database used when testing (as defined within the DATABASES setting). If you use the <code>database-setup.py</code> script to build the template database, it will add the schemas for you.</p> <pre><code># app/settings.py\n\nDATABASES = {\n    \"default\": {\n        ...\n        # Test settings\n        \"TEST\": {\"NAME\": \"test_development\", \"TEMPLATE\": \"template_test\"},\n    }\n}\n</code></pre>"},{"location":"app-settings.html#allowed-hosts","title":"Allowed Hosts","text":"<p>When you run your application in production, you will need to add the production address to the allowed hosts.</p> <pre><code>ALLOWED_HOSTS = [\n    \"127.0.0.1\",\n    \"localhost\",\n]\n</code></pre>"},{"location":"app-settings.html#allowed-email-domains","title":"Allowed email domains","text":"<p>In this is set up a restriction on the domains that users are able to log up with. To set these, add the restrictions as a list in <code>app/settings.py</code>.</p> <pre><code># app/settings.py\n\n# Emails that the user can sign up with\nALLOWED_EMAIL_DOMAINS = [\"mydomain\", \"seconddomain\"]\n</code></pre> <p>If you set this as an empty list, then all domains will be allowed. Don't forget - when you change this, you'll also need to change the email validator in the fronend.</p>"},{"location":"app-settings.html#admins","title":"Admins","text":"<p>You need to update the names and email addresses of the people to send error logs to when in production:</p> <pre><code>ADMINS = [(\"Mary\", \"mary@example.com\"), (\"John\", \"john@example.com\")]\n</code></pre>"},{"location":"app-settings.html#email-settings","title":"Email settings","text":"<p>Change the default email details:</p> <pre><code>DEFAULT_FROM_EMAIL = \"Sender Name &lt;support@example.com&gt;\"\nEMAIL_SUBJECT_PREFIX = \"Application Name - \"\n</code></pre>"},{"location":"app-settings.html#emails","title":"Emails","text":""},{"location":"app-settings.html#base-message","title":"Base Message","text":"<p>The base message template is included in the accounts templates folder at <code>app/accounts/templates/email/base_message.html</code>. This is used to style the HTML emails that are sent out. There are a number of features in here that can be customised, but the ones that are most likely to require changing include:</p>"},{"location":"app-settings.html#the-title-metadata","title":"The <code>title</code> metadata","text":"<p>This is for when the title isn't provided in the html message using the template.</p> <pre><code>...\n&lt;title&gt;{% block title %}Example App{% endblock %}&lt;/title&gt;\n...\n</code></pre>"},{"location":"app-settings.html#the-main-body-of-the-email","title":"The main body of the email","text":"<p>The <code>{% block content %} {% endblock %}</code> section is where the contents from the individual emails will be placed. The remainder is styling choices.</p> <pre><code>...\n&lt;div style=\"background-color: #005eb8; height: 40px\"&gt;&lt;/div&gt;\n&lt;div\n    style=\"\n    background-color: #e9ecef;\n    height: 100px;\n    font-family: sans-serif;\n    padding: 40px;\n    box-sizing: border-box;\n    \"\n&gt;\n    &lt;h2&gt;Example App&lt;/h2&gt;\n&lt;/div&gt;\n&lt;div style=\"min-height: 300px; padding: 40px; font-family: sans-serif\"&gt;\n    {% block content %} {% endblock %}\n&lt;/div&gt;\n&lt;div style=\"background-color: #005eb8; height: 20px\"&gt;&lt;/div&gt;\n...\n</code></pre>"},{"location":"app-settings.html#account-activation-email","title":"Account Activation email","text":"<p>The main wording and templates for the account activation email (the one sent when a new account is requested) can be found in <code>app/accounts/templates/email</code>. There is a html and text file in there, and both will need updating simultaneously.</p>"},{"location":"app-settings.html#html-template","title":"HTML Template","text":"<p>In the html file, you will see that there are blocks to be inserted into the base_message template. These are all likely to require updating:</p> <pre><code>&lt;!-- app/accounts/templates/email/account_activation_email.html --&gt;\n\n{% extends 'base_message.html' %}\n{% block title %}\nConfirm registration\n{% endblock %}\n{% block preview %}\nPlease confirm your email to get access to the Portal.\n{% endblock %}\n{% block content %}\n\n  &lt;p&gt;Hi {{ user.first_name }} {{user.last_name }},&lt;/p&gt;\n  Thanks for signing up to the Portal.&lt;/p&gt;\n\n    &lt;p&gt;Please click on the link below to confirm your registration:&lt;/p&gt;\n    &lt;p&gt;\n    &lt;!-- prettier-ignore --&gt;\n    {% autoescape off %}\n    http://{{ domain }}/#/activate-account/{{uid}}/{{token}}\n    {% endautoescape %}\n&lt;/p&gt;\n\n{% endblock %}\n</code></pre> <p>You can change the subject line for the email the user receives when they request a new account by changing the subject line in the accounts helpers file.</p> <pre><code># app/accounts/helpers.py\n\ndef send_account_activation_email(user, current_site):\n    ...\n    subject = \"Activate Your Account\"\n    ...\n</code></pre> <p>If you change this, you will also need to update the test in <code>tests_register.py</code>.</p> <pre><code># app/accounts/tests/tests_register.py\n\ndef test_activation_email(self):\n    ...\n    # Check email subject\n    self.assertEqual(mail.outbox[0].subject, \"Activate Your Account\")\n    ...\n</code></pre>"},{"location":"app-settings.html#plaintext-template","title":"Plaintext template","text":"<p>In the <code>.txt</code> file, there is less customisation available, and here you can only change the message that the user receives.</p> <pre><code># app/accounts/templates/email/account_activation_email.txt\n\n{% autoescape off %}\nHi {{ user.first_name }} {{user.last_name }},\n\nThanks for signing up to the Portal. Please click on the link below to\nconfirm your registration:\n\nhttp://{{ domain }}/#/activate-account/{{uid}}/{{token}}\n\n{% endautoescape %}\n</code></pre>"},{"location":"app-settings.html#password-reset-email","title":"Password Reset email","text":"<p>The main wording and templates for the password reset email (the one sent when the user requests a password reset) can be found in <code>app/accounts/templates/email</code>. There is a html and text file in there, and both will need updating simultaneously.</p>"},{"location":"app-settings.html#html-template_1","title":"HTML Template","text":"<p>In the html file, you will see that there are blocks to be inserted into the base_message template. These are all likely to require updating:</p> <pre><code>&lt;!-- app/accounts/templates/email/password_reset_email.html --&gt;\n\n{% extends 'base_message.html' %}\n&lt;!-- prettier-ignore --&gt;\n{% block title %} Reset password {% endblock%} \n{% block preview %} \nWe have received a request to reset your password \n{% endblock %} \n{% block content %}\n\n&lt;p&gt;Hi {{user.first_name}} {{user.last_name}},&lt;/p&gt;\n\n&lt;p&gt;\n    You're receiving this email because you requested a password reset for your\n    user account on the Example Website.\n&lt;/p&gt;\n\n&lt;p&gt;Please go to the following page and choose a new password:&lt;/p&gt;\n\n&lt;!-- prettier-ignore --&gt;\n{% autoescape off %} {% block reset_link %}\n{{ reset_password_url }}\n{% endblock %} {% endautoescape %}\n\n&lt;p&gt;Your login email, in case you've forgotten, is: {{ email }}&lt;/p&gt;\n\n&lt;p&gt;Thanks for using our site!&lt;/p&gt;\n\n{% endblock %}\n</code></pre> <p>You can change the subject line for the email the user receives when they request a new password by changing the subject line in the accounts helpers file.</p> <pre><code># app/accounts/helpers.py\n\ndef send_password_reset_email(user, key, current_site):\n    ...\n    subject = \"Reset your password\"\n    ...\n</code></pre> <p>If you change this, you will also need to update the test in <code>tests_password_reset.py</code>.</p> <pre><code># app/accounts/tests/tests_password_reset.py\n\ndef test_password_reset(self):\n    ...\n    # Check email subject\n    self.assertEqual(mail.outbox[0].subject, \"Reset your password\")\n    ...\n</code></pre>"},{"location":"app-settings.html#plaintext-template_1","title":"Plaintext template","text":"<p>In the <code>.txt</code> file, there is less customisation available, and here you can only change the message that the user receives.</p> <pre><code># app/accounts/templates/email/password_reset_email.txt\n\nHi {{user.first_name}} {{user.last_name}},\n\nYou're receiving this email because you requested a password reset for your\nuser account on the Example Website.\n\nPlease go to the following page and choose a new password:\n\n{% autoescape off %}\n{% block reset_link %}\n{{ reset_password_url }}\n{% endblock %}\n{% endautoescape %}\n\nYour login email, in case you've forgotten, is: {{ email }}\n\nThanks for using our site!\n</code></pre>"},{"location":"app-settings.html#error-messages","title":"Error Messages","text":""},{"location":"app-settings.html#account-activation-error-message","title":"Account Activation Error Message","text":"<p>If the user tries to activate their account with invalid details, this is the error that will appear in the frontend response. You can update it by changing the error message in the accounts serializers page.</p> <pre><code># app/accounts/serializers.py\n\nclass ActivateAccountSerializer(serializers.Serializer):\n    ...\n\n    def validate(self, data):\n        ...\n            raise serializers.ValidationError(\n                \"Unable to find this user. Please try again.\"\n            )\n        ...\n            raise serializers.ValidationError(\n                \"This email has already been activated.\"\n            )\n        ...\n            raise serializers.ValidationError(\"Invalid activation token.\")\n        ...\n</code></pre>"},{"location":"app-settings.html#login-error-message","title":"Login Error Message","text":"<p>If the user tries to login, but either their account hasn't been activated yet, or their credentials are incorrect, then another error message will be displayed to them. This can also be updated in the accounts serializers page.</p> <pre><code># app/accounts/serializers.py\n\nclass LoginSerializer(serializers.Serializer):\n    ...\n\n    def validate(self, data):\n        ...\n        except Exception:\n            raise serializers.ValidationError(\"Username not recognised.\")\n\n        if user and not user.is_active:\n            ...\n            raise serializers.ValidationError(\n                \"This email has not been validated. Please check your \"\n                \"emails for the validation link.\"\n            )\n        raise serializers.ValidationError(\n            \"Password incorrect. Please try again.\"\n        )\n</code></pre>"},{"location":"elastic-beanstalk-deployment.html","title":"Deploying to Elastic Beanstalk","text":"<p>There are two considerations when deploying to elastic beanstalk:</p> <ol> <li>Application Set up</li> <li>Healthcheck</li> </ol>"},{"location":"elastic-beanstalk-deployment.html#1-application-set-up","title":"1. Application set up","text":""},{"location":"elastic-beanstalk-deployment.html#extensions","title":"Extensions","text":"<p>To get the app ready for Elastic Beanstalk, create a folder in the <code>app</code> folder called <code>.ebextensions</code>. In here, you can add multiple <code>.config</code> files containing details required by elastic beanstalk.</p>"},{"location":"elastic-beanstalk-deployment.html#django-configuration","title":"Django configuration","text":"<p>Broadly, one file needs to contain the settings required for a Django app to run. Specifically, the file should contain the following:</p> <pre><code># app/.ebextensions/django.config\n\noption_settings:\n    aws:elasticbeanstalk:container:python:\n        WSGIPath: app.wsgi:application\n    aws:elasticbeanstalk:environment:proxy:staticfiles:\n        /static: static\n</code></pre>"},{"location":"elastic-beanstalk-deployment.html#environment-variables","title":"Environment Variables","text":"<p>In another file, you should include all the required environment variables. Specifically:</p> <pre><code># app/.ebextensions/environment.config\n\noption_settings:\n    aws:elasticbeanstalk:application:environment:\n        ENVIRONMENT_DESCRIPTION: PROD\n        SECRET_KEY: secret-generated-key-here\n        DATABASE_NAME: database-name-here\n        DATABASE_USER: database-user-here\n        DATABASE_PASSWORD: database-user-password-here\n        DATABASE_HOST: database-host-here\n        DATABASE_PORT: database-port-here\n        MAIL_SERVER: mail-server-here\n        MAIL_PORT: mail-port-here\n        MAIL_USERNAME: mail-username-here\n        MAIL_PASSWORD: mail-password-here\n</code></pre> <p>Environment Variables</p> <p>This file contains sensitive environment variables - make sure it is not included in your source control.</p> <pre><code># .gitignore\n\nenvironment.config\n...\n</code></pre>"},{"location":"elastic-beanstalk-deployment.html#ebignore","title":"EBIgnore","text":"<p>You should also have an <code>.ebignore</code> file that contains globs of all files and folders that should not be uploaded to elastic beanstalk. There may be some folders or files you create that you don't want uploaded in addition, but in particular, you should make sure the following folders are included:</p> <pre><code>#\u00a0app/.ebignore\n\n# Requirements files (NOT requirements.txt as this is needed by EB)\nrequirements.in\n\n# React bits not required\nfrontend/src\nfrontend/static\n\n# Django folders not required\n**/migrations\nsent_emails\n\n# Additional dev-only folders\n__pycache__\n\n# Other files not to include\n*.sqlite3\n</code></pre>"},{"location":"elastic-beanstalk-deployment.html#postgresql-usage","title":"Postgresql usage","text":"<p>As noted in app-settings, if you are using Postgres with elastic beanstalk, you should also make sure to include the hidden dependency <code>psycopg2-binary</code> in your requirements file. This is instead of <code>pyscopg2</code>.</p> <pre><code># app/requirements.in\n\npsycopg2-binary\n</code></pre>"},{"location":"elastic-beanstalk-deployment.html#2-healthcheck","title":"2. Healthcheck","text":"<p>By default, the app will automatically fail all healthchecks, so always look like it is failing. However, there are a number of settings that can be used to stop this.</p> <p>Firstly, you need to install, then include <code>django-ebhealthcheck</code> into your requirements file.</p> <pre><code>pip install django-ebhealthcheck\n</code></pre> <pre><code># app/requirements.in\n...\ndjango-ebhealthcheck\n...\n</code></pre> <pre><code>pip-compile app/requirements.in\n</code></pre> <p>Next, in your settings, add this as an installed app:</p> <pre><code># app/app/settings.py\n\nINSTALLED_APPS = [\n    ...\n    \"ebhealthcheck.apps.EBHealthCheckConfig\",\n    ...\n]\n</code></pre> <p>Finally, you'll need to include the following:</p> <pre><code># app/app/settings.py\n\nimport requests\n\ndef get_ec2_instance_ip():\n    \"\"\"\n    Try to obtain the IP address of the current EC2 instance in AWS\n    \"\"\"\n    try:\n        ip = requests.get(\n            \"http://169.254.169.254/latest/meta-data/local-ipv4\",\n            timeout=0.01,\n        ).text\n    except requests.exceptions.ConnectionError:\n        return None\n\n    return ip\n\nAWS_LOCAL_IP = get_ec2_instance_ip()\n\n# Add additional required addressed into allowed hosts\nALLOWED_HOSTS += [\n    AWS_LOCAL_IP,\n    \".elasticbeanstalk.com\",\n    \".amazonaws.com\",\n    \".my-public-domain.com\"\n]\n</code></pre>"},{"location":"elastic-beanstalk-deployment.html#app-deployment","title":"App Deployment","text":"<p>When you are ready to deploy it, you'll need to install <code>awsebcli</code>. To do this use the command:</p> <pre><code>pip install awsebcli\n</code></pre> <p>You might also want to add it to <code>requirements-dev.txt</code> too:</p> <pre><code># requirements-dev.txt\n\nawsebcli\n...\n</code></pre> <p>You'll then need to <code>cd</code> into the <code>app</code> folder to initialise the elastic beanstalk application. A summary of the <code>eb</code> commands can be found here.</p> <p>The first you'll need to use is:</p> <pre><code>eb init -i\n</code></pre> <p>This initialises the elastic beanstalk repository for you. You'll need to work through all of the options here as required.</p> <p>Access Keys</p> <p>You may have difficulties with the Access Key and Secret Access Key. If you do, make sure that they are set in your environment variables correctly (if you have set the IAM user with access to the S3 bucket as <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code>, you'll probably be told you don't have access).</p> <p>Next, you can create an environment to deploy to by running:</p> <pre><code>eb create\n</code></pre> <p>Again, you will be given several options to work through.</p> <p>Once the environment has been created, you'll need to go to the database security group (if you are using AWS RDS) and add the EB security group as an inbound rule for PostgreSQL. The easiest way of finding the EB security group, is to look up the configuration option within EB for the Security Group name, and then look up the security group ID in the EC2 management console.</p> <p>Security Groups and VPCs</p> <p>You will need to make sure that the database is deployed in a VPC which the elastic beanstalk instance can access. If it isn't, you won't be able to add the EB security group to the DB security group.</p> <p>Finally, to deploy the app, ensure that you are in the app folder, and use the command <code>eb deploy</code>.</p> <pre><code>cd app\neb deploy\n</code></pre>"},{"location":"s3-resource-storage.html","title":"Adding S3 Resource Storage","text":"<p>There are a number of times when you might want to use S3 for storage rather than local storage. For example to add media storage for a field in a database table, or to store static files. This will walk you through the additional configuration required.</p>"},{"location":"s3-resource-storage.html#setup","title":"Setup","text":"<p>Using elastic beanstalk</p> <p>When using Elastic Beanstalk, you don't need to host the static files separately, and instead, EB will handle the file serving for you. All you need to do is to include this in your <code>.ebextensions/django.config</code> file:</p> <pre><code>aws:elasticbeanstalk:environment:proxy:staticfiles:\n    /static: static\n</code></pre> <p>The options should remain set for local static files in your settings.py</p> <pre><code># app/app/settings.py\n\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\" # The default - so could be left out altogether\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = str(BASE_DIR.joinpath(\"static\"))\n</code></pre>"},{"location":"s3-resource-storage.html#s3-bucket","title":"S3 Bucket","text":"<p>Create an S3 bucket using all the default settings.</p> <p>If you want to use S3 for static file storage too, you will need to allow public access on your bucket. Once you have switched off the setting on the bucket to 'block all public access', apply this policy:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AddPerm\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\"s3:GetObject\"],\n            \"Resource\": [\"arn:aws:s3:::my-bucket-name/static/*\"]\n        }\n    ]\n}\n</code></pre> <p>If you are just hosting private media files, the S3 bucket you create does not need public access. Access to it is controlled via the access keys given to Django.</p> <p>To create an IAM user with the right access to this bucket, you need to:</p> <ol> <li>Create an IAM user with Programmatic access</li> <li>Add this policy inline to the IAM user (make sure to change <code>my-bucket-name</code> to your bucket):     <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObjectAcl\",\n                \"s3:GetObject\",\n                \"s3:ListBucket\",\n                \"s3:DeleteObject\",\n                \"s3:PutObjectAcl\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::my-bucket-name/*\",\n                \"arn:aws:s3:::my-bucket-name\"\n            ]\n        }\n    ]\n}\n</code></pre></li> <li>Make sure to keep the access key and secret access key safe as you'll need these.</li> </ol>"},{"location":"s3-resource-storage.html#packages","title":"Packages","text":"<p>First, you need to set the app up to use the storages package to handle the file transfer. To do this, you need to update two files:</p> <p>Update the packages used</p> <code>app/requirements.in</code> <p>You'll need to install django-storages and boto3:</p> <pre><code>pip install django-storages boto3\n</code></pre> <p>Make sure to include them in your <code>requirements.in</code> file too:</p> <pre><code># app/requirements.in\n\n...\nboto3\ndjango-storages\n...\n</code></pre> <p>and re-compile your <code>requirements.txt</code> document using</p> <pre><code>pip-compile app/requirements.in\n</code></pre> <code>app/app/settings.py</code> <p>Include <code>storages</code> within your list of INSTALLED_APPS in the Django settings.</p> <pre><code># settings.py\nINSTALLED_APPS = [\n    ...\n    \"storages\",\n    ...\n]\n</code></pre>"},{"location":"s3-resource-storage.html#environment-variables","title":"Environment variables","text":"<p>Environment Variables</p> Local - Mac <p>If you are running it locally, you will need to export them to your current environment. This will create a temporary environment variable. It will only exist for that terminal session, but is available immediately.</p> <pre><code>export AWS_REGION_NAME='eu-west-2'\nexport AWS_ACCESS_KEY_ID='ABCDFG123456789ABCDEFG'\nexport AWS_SECRET_ACCESS_KEY='ABCDFG123456789ABCDEFG'\nexport AWS_STORAGE_BUCKET_NAME='my-bucket-name'\n</code></pre> <p>Check it's working by using:</p> <pre><code>echo ${AWS_REGION_NAME}\n</code></pre> Local - Windows <p>On Windows, you'll need to restart the command prompt for this change to to effect. If using the terminal in VSCode, this will include restarting VSCode itself.</p> <pre><code>setx AWS_REGION_NAME 'eu-west-1a'\nsetx AWS_ACCESS_KEY_ID 'ABCDFG123456789ABCDEFG'\nsetx AWS_SECRET_ACCESS_KEY 'ABCDFG123456789ABCDEFG'\nsetx AWS_STORAGE_BUCKET_NAME 'my-bucket-name'\n</code></pre> <p>Check it's working by using:</p> <pre><code>echo %AWS_REGION_NAME%\n</code></pre> <p>If this doesn't work, you can use the <code>set</code> command instead of <code>setx</code> and this will create a temporary environment variable. It will only exist for that terminal session, but is available immediately.</p> <pre><code>setx AWS_REGION_NAME eu-west-1a\nsetx AWS_ACCESS_KEY_ID ABCDFG123456789ABCDEFG\nsetx AWS_SECRET_ACCESS_KEY ABCDFG123456789ABCDEFG\nsetx AWS_STORAGE_BUCKET_NAME my-bucket-name\n</code></pre> Elastic Beanstalk <p>Add these to your <code>.ebextensions/environment.config</code> file:</p> <pre><code>AWS_REGION_NAME: eu-west-1a\nAWS_ACCESS_KEY_ID: ABCDFG123456789ABCDEFG\nAWS_SECRET_ACCESS_KEY: ABCDFG123456789ABCDEFG\nAWS_STORAGE_BUCKET_NAME: my-bucket-name\n</code></pre>"},{"location":"s3-resource-storage.html#giving-django-access","title":"Giving Django access","text":"<p>In your <code>settings.py</code> file, you now nees to update the settings to make use of these variables, and get the app ready to go.</p> <pre><code># app/app/settings.py\n\n# Media storage (using AWS S3)\nAWS_S3_REGION_NAME = os.environ.get(\"AWS_REGION_NAME\", \"eu-west-1\")\nAWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\", \"\")\nAWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\", \"\")\nAWS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_STORAGE_BUCKET_NAME\", \"\")\nAWS_S3_CUSTOM_DOMAIN = f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\nAWS_DEFAULT_ACL = None # Inherit the permissions from the bucket/folder\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n\n# How long the object link is viewable for\nAWS_S3_OBJECT_PARAMETERS = {\"CacheControl\": \"max-age=86400\"}\nAWS_QUERYSTRING_EXPIRE = 600\n</code></pre>"},{"location":"s3-resource-storage.html#media-files","title":"Media Files","text":""},{"location":"s3-resource-storage.html#storage-backends","title":"Storage Backends","text":""},{"location":"s3-resource-storage.html#private-media","title":"Private Media","text":"<p>To handle private media, we need to create a Storage backend. To do this, create a file in <code>app/app/storage_backends.py</code> with the following:</p> <p>Create a private storage backend</p> <pre><code># app/app/storage_backends.py\nfrom storages.backends.s3boto3 import S3Boto3Storage\n\nclass PrivateMediaStorage(S3Boto3Storage):\n    location = \"private\" # The folder name in the bucket\n    default_acl = \"private\"\n    file_overwrite = False\n    custom_domain = False\n</code></pre> <p>Files in this bucket will be accessible via an expirable link (the expiry time is defined within settings).</p>"},{"location":"s3-resource-storage.html#static-files","title":"Static Files","text":"<p>To handle public static files, a slightly different backend is required. In the same <code>storage_backends.py</code> file, you need to include:</p> <p>Create a public storage backend</p> <pre><code># app/app/storage_backends.py\nfrom storages.backends.s3boto3 import S3StaticStorage\n\nclass StaticStorage(S3StaticStorage):\n    location = \"static\"\n</code></pre>"},{"location":"s3-resource-storage.html#django-settingspy","title":"Django settings.py","text":""},{"location":"s3-resource-storage.html#private-media_1","title":"Private Media","text":"<p>Change the media settings in your <code>app/app/settings.py</code> file to use this new backend.</p> <p>You'll need to update the MEDIA_URL setting, and add the storage backend:</p> <pre><code># app/app/settings.py\n- MEDIA_URL = \"/media/\"\n+ MEDIA_URL = f\"https://{AWS_S3_CUSTOM_DOMAIN}/private/\"\n+ DEFAULT_FILE_STORAGE = \"app.storage_backends.PrivateMediaStorage\"\n</code></pre>"},{"location":"s3-resource-storage.html#static-files_1","title":"Static Files","text":"<p>Change the static settings in your <code>app/app/settings.py</code> file to use the new backend.</p> <p>You'll need to update add the storage backend:</p> <pre><code># app/app/settings.py\n\nSTATICFILES_STORAGE = \"app.storage_backends.StaticStorage\"\n</code></pre>"},{"location":"s3-resource-storage.html#usage","title":"Usage","text":""},{"location":"s3-resource-storage.html#collect-static-files","title":"Collect Static Files","text":"<p>To collect and upload all static files to S3, you will need to run:</p> <pre><code>python app/manage.py collectstatic --noinput\n</code></pre> <p>Django\u2019s collect static can be very slow when you will use S3 as storage. For that, you can use Collectfast to make this faster. Install it using <code>pip install Collectfast</code>. Then update the <code>app/app/settings.py</code> like this:</p> <pre><code># app/app/settings.py\n\nAWS_PRELOAD_METADATA = True\nINSTALLED_APPS = (\n    ...\n    'collectfast',\n    ...\n)\n</code></pre> <p>Remember to include Collectfast in your <code>requirements-dev.txt</code> file if you are using it.</p>"},{"location":"s3-resource-storage.html#add-file-storage-as-a-field","title":"Add file storage as a field","text":"<p>In your <code>models.py</code> file that contains the model you want to add the field to, add the PrivateMediaStorage import:</p> <pre><code># models.py\n\nfrom app.storage_backends import PrivateMediaStorage\n</code></pre> <p>Then you can add it as a field, using the FileField built into Django:</p> <pre><code># models.py\n\nclass ExampleDataTable(models.Model):\n    ...\n    # Example using S3 Media storage\n    data_file = models.FileField(\n        storage=PrivateMediaStorage,\n        null=True,\n        blank=True,\n        help_text=\"Max filesize: 15MB\",\n    )\n    ...\n</code></pre> <p>Applying these changes by running:</p> <pre><code>python app/manage.py makemigrations\npython app/manage.py migrate\n</code></pre>"},{"location":"s3-resource-storage.html#testing","title":"Testing","text":"<p>You can check that everything has connected as expected by using the admin panel to upload a file. Simply run the Django server and visit http://127.0.0.1:8000/admin.</p>"},{"location":"s3-resource-storage.html#api-access","title":"API access","text":"<p>You can also use Django Rest Framework to create an API quickly that returns you the url of the required media.</p> <p>Backend api</p> app/api/serializers.py <pre><code># app/api/serializers.py\nfrom rest_framework import serializers\n\nfrom api.models import ExampleDataTable\n\nclass ExampleDataTableUrlSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ExampleDataTable\n        fields = [\"id\", \"data_file\"]\n</code></pre> app/api/api.py <pre><code># app/api/api.py\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom rest_framework import generics, permissions\nfrom rest_framework.response import Response\n\nfrom api.models import ExampleDataTable\nfrom api.serializers import ExampleDataTableUrlSerializer\n\nclass ExampleDataTableUrlAPI(generics.ListAPIView):\n    \"\"\"\n    Returns the file details\n    \"\"\"\n\n    permission_classes = [\n        permissions.IsAuthenticated,\n    ]\n    serializer_class = ExampleDataTableUrlSerializer\n    queryset = ExampleDataTable.objects.all()\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = [\"id\"]\n\n    def get_queryset(self):\n        queryset = self.queryset\n        queryset = self.filter_queryset(queryset)\n        return queryset\n</code></pre> app/api/urls.py <pre><code># app/api/urls.py\nfrom django.urls import path\nfrom rest_framework import routers\n\nfrom api.api import ExampleDataTableViewSet, ExampleDataTableUrlAPI\n\nrouter = routers.DefaultRouter()\nrouter.register(\"examples\", ExampleDataTableViewSet, \"examples\")\n\nurlpatterns = [path(\"example-data\", ExampleDataTableUrlAPI.as_view())]\n\nurlpatterns += router.urls\n</code></pre> <p>All results would be returned here by visiting <code>http://127.0.0.1:8000/api/v1/exampleData</code> or a single one using <code>http://127.0.0.1:8000/api/v1/exampleData?id=1</code>.</p> <p>The response is a timed URL (the timeout is based on the setting AWS_QUERYSTRING_EXPIRE).</p> <p>Sample Response</p> <pre><code>[\n    {\n        \"id\": 1,\n        \"data_file\": \"https://test-media-storage.s3.amazonaws.com/private/Basic_Wireframes_Wvjh71L.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIARD3GBEGOH536VGFD%2F20210910%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20210910T173840Z&amp;X-Amz-Expires=600&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=0c5b403596f5061e663bf863aed72026fee52e6c6a991a3e275e990f27cc277b\"\n    }\n]\n</code></pre>"},{"location":"styling.html","title":"Stylesheets","text":"<p>The app is styled using scss, and based on the Bootstrap 5 components.</p> <p>You can find out more about the Bootstrap 5 components here. Specifically, the examples currently in use use <code>react-bootstrap</code> which is a great library for quickly adding the Bootstrap components.</p>"},{"location":"styling.html#custom-scss","title":"Custom SCSS","text":"<p>To add custom SCSS, you can design how you want you app to look using any good Bootstrap Builder. This is a good place to start for example.</p> <p>Inspiration can be found on the Bootswatch pages, and if you want to use one as a base, you can click on 'Free Themes' on the builder above, and choose to customise the theme you like.</p> <p>Once you are happy with the styling, you should click 'Export Theme' to download the 2 required files:</p> <ol> <li>_variables.scss</li> <li>custom.scss</li> </ol> <p>These should be placed in <code>app/frontend/src/scss</code> to overwrite the existing <code>_variables.scss</code> and <code>custom.scss</code> files there. They will be picked up, and combined with the bootstrap styling in the <code>global.scss</code> file, which is already imported into the main app.</p>"}]}